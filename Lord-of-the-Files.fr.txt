Sa Majesté Des Fichiers: Comment Github a apprivoisé le logiciel libre (et plus)

Par Robert McMillan, Wired Enterprise

SAN FRANCISCO - Quand les fondateurs de Github ont emménagé dans leurs loft du South-Of-Market, la première chose qu'ils ont fait fût redécorer. Ils ont transformé le plus gros bureau de l'étage en une parodie de suite exécutive - incluant une fausse cheminée, des chaises en cuirs à fanfreluches et un globe en bois qui révèle une bouteille de scotch single malt lorsqu'on l'ouvre. Accroché au mur, un tableau d'un chat. habillé comme Napoléon, avec cinq jambes-tentacules. Ils l'appellent l'Octocat.

Mais ce n'est pas une suite exécutive. C'est une salle de réunion commune où tout le monde peut trainer avec n'importe qui, travailler et s'amuser en même temps.

“Everybody can bring their friends into that room and sort of impress them and stuff,” says Scott Chacon, GitHub’s CIO co-founder. You see, Chacon and CEO Chris Wanstrath and the rest of the executive team don’t have private offices. They work on the open floor next to the coders, glued to monitors with the rest of the staff, listening to LCD Soundsystem. Loud.

"Tout le monde peut amener ses amis et les impressionner, ce genre de choses," dit Scott Chacon, DSI et co-fondateur de Github. En fait, Chacon et le directeur Chris Wanstrath ainsi que le reste de l'équipe exécutive n'ont pas de bureaux privés. Ils travaillent dans l'open space, à côté des développeurs, collés aux écrans comme le reste du staff, écoutant le LCD Soundsystem. Fort.

Le loft de 13000 mètre carrés de Github reflète sa mission: démocratiser le développement informatique. Github.com peut-être défini comme un Facebook pour geeks. Au lieu d'uploader des vidéos de son chat, on upload des programmes. N'importe qui peut commenter votre code, y faire des ajouts et en faire quelque chose de meilleur. L'astuce est de décentraliser la programmation, et donner à tous une nouvelle façon de la contrôler. Github a transformé la façon dont les programmes sont écrits, transformant le code en quelque chose d'un peu plus anarchique, un peu plus amusant, et beaucoup plus productif.

Et le monde du logiciel l'adore. Github compte maintenant plus de 1.3 million d'utilisateurs et plus de 2 millions de repo de codes source - soit 8 fois ce qu'il y avait il y a deux ans. Si on compte les fragments de code et les pages Wiki qui sont hébergés, ont arrive à plus de 4 millions de repos. Il y a deux ans, Github était une équipe de 8 personnes, travaillant dans les cafés de San Francisco. Début 2011, ils avaient grossi à 14 "hubbernauts" - comme sont affectueusement nommés les employés de chez Github - et un an plus tard, ils sont 57. En juillet, ils ont emménagés dans les anciens locaux de Six Apart. Github grandit vite - et n'a pas reçu de fond d'investissements.

Une fois que vous avez commencé à entendre parler de Github, vous commencez à le voir a peu près partout. Parfois, il héberge le code d'un site de renom. D'autres fois, il conduit un projet secret d'une entreprise faisant partie de Fortune 500. Github a amené le logiciel open source proche de remplir ses promesses - mais sans s'arrêter là. Github démocratise aussi la création de pages web et l'ADN des outils d'analyses, et peut-être même la terre du droit.

"Github a changé la façon dont les gens approchent le développement," dit Tom Preston-Werner, le chef technique de la compagnie. "Ils réalisent que ce n'est pas si complexe."

Git Scratches Itch

Comme beaucoup d'autre projets geek à succès, Github commence avec des développeurs remplissant leurs besoins. Il y a environ cinq ans, Wanstrath et un de ses amis développeurs P.J. Hyett écrivaient tous deux du code à Cent, un site de news et de reviews technologique. Leur outil de prédilection était le framework web Ruby On Rils, qui permet de créer facilement des applications web.

Alors qu'ils construisaient leur site sur Cnet, Wanstrath et Hyett commencèrent à faire beaucoup d'améliorations à Ruby On Rails lui-même. Mais ils trouvèrent qu'il n'était pas simple d'avoir ces changements intégrés dans le projet open-source lui-même. Suivant le modèle alors dominant du développement open-source, Rails était encadré par un ensemble de développeurs de confiance qui avait la permission de "commiter" des changements sur le code source du projet. Pour avoir un de leur changement ajouter au code central,  Wanstrath et Hyett devaient convaincre un de ces développeurs que leurs changements valaient la peine d'être intégré. Cela demandait souvent plus de travail qu'écrire le code lui-même.

Ils n'étaient pas les seuls développeurs à souffrir de ce modèle des "Gardiens de Confiance" de l'open source. Une décennie plus tôt, Linus Torvalds se trouva lui-même à étouffer dans son rôle de gardien de l'OS qu'il avait inventé: Linux. Au début, Torvalds hébergeait le code sur un site appartenant à l'université d'Helsinki. Si les gens trouvaient un bug dans le code, ils lui envoyaient un fichier avec les changements par e-mail. Si Torvalds lisait l'e-mail et aimait les changements, il les incorporaient à Linux. Mais Torvalds est connu pour ne pas lire ses e-mails, et ainsi, plus le projet devenait populaire, de plus en plus de soumissions échappaient à son créateur.

C'était le petit secret honteux du monde de l'open-source. Avec la quantité de projets de programmes gratuit, une grosse partie du code - voir même peut-être la majorité du code - n'était en fait jamais utilisé. Il était souvent juste trop dur pour les utilisateurs occasionnels de montrer aux développeurs les changements fait et de "merger" facilement ceux-ci dans le code source de base.