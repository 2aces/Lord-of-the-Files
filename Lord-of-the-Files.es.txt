El Señor de los Archivos: Cómo GitHub Domesticó al Software Libre (Y Más)Tamed Free Software

por Robert McMillan, Wired Enterprise


SAN FRANCISCO — Cuando los fundadores de  GitHub se trasladaron a su ostentoso loft en South-of-Market el año pasado, lo primero que hiceron fue redecorar. Conviertieron la oficina más grande del piso en la parodia de una suite ejecutiva, completamente incluyendo una chimenea falsa, sillones de felpa y un globo terráqueo de madera que se abre para revelar una botella de whisky escocés de malta. Colgado de la pared está una pintura de un gato, vestido como Napoleón, con cinco piernas de pulpo. Lo llaman el Octocat.

Lo cierto es que esta no es una suite ejecutiva. Es una sala de reuniones comunal donde cualquiera puede juntarse con alguien más, y tener algo de diversión al mismo tiempo.

“Todos pueden traer a sus amigos a esta sala y tratar de impresionarlos y ese tipo de cosas", dice Scott Chacon, CIO de GitHub y cofundador. Verán, Chacon, el CEO Chris Wanstrath y el resto del equipo ejecutivo no tienen oficinas privadas. Trabajan en el piso abierto junto a los programadores, pegados a los monitores con el resto del equipo, escuchando a  LCD Soundsystem. Fuerte.

El geekstastico loft de 14,000 pies cuadrados refleja su misión: democratizar la programación de computadores.  GitHub.com puede ser visto como un Facebook para geeks. En vez de subir videos de tu gato, subes software. Cualquiera puede comentar tu código y agregarle algo, y construir sobre este algo mejor. El truco es la programación descentralizada, dándole a cada uno un nuevo tipo de control. GitHub ha remecido la manera en que el software se escribe, haciendo  la codificación un poco más anárquica, un poco más productivo, y mucho más productiva.

El mundo del software lo ama. GitHub ahora tiene más de  1.3 millones de usuarios, y sobre 2 millones de repositorios de código fuente, ocho veces la cantidad de hace dos años atrás. Si cuentas secciones de código y páginas Wiki que están almacenadas en el sitio, hay más de 4 millones de repositorios. Dos años atrás, GitHub era un equipo de ocho, sosteniendo reuniones de la compañía en los cafés de San Francisco. Hacia el principio de 2011, había crecido a 14 “hubbernautas” (como se llaman afectuosamente a los empleados de GitHub) y un años después, están en 57. En julio tomaron las antiguas oficinas de la empresa de blogging Six Aparte. GitHub está creciendo rápido, y no ha tomado un centavo de fondos de riesgo.

Una vez que has escuchado sobre  GitHub, comienzas a verlo casi en todos lados. A veces está alojando el código que soporta un website de renombre. Otras veces está impulsando un secreto proyecto dentro de una compañía Fortune 500. Ha llevado el software abierto mucho más cerca de cumplir su promesa, pero no se detienen allí. Está democratizando la creación de páginas web y herramientas de análisis de ADN y talvez incluso las ley de la tierra.

“GitHub ha cambiado la manera en que la gente se aproxima al desarrollo," dice Tom Preston-Werner, el director de tecnología de la compañía. “Se dan cuenta que not tiene que ser tan complejo.”

Git Rasca la Comezón

Como tantos otros proyectos geek exitosos, GitHub comenzó con programadores rascando su propia picazón. Hace cinco años atrás, Wanstrath y su colega programador P.J. Hyett estaban escribiendo código en Cnet, el sitio de noticias y comentarios sobre tecnología. El lenguaje que eligieron fue Ruby on Rails, un ambiente de programación que facilita desarrollar aplicaciones web.

En la medida que construían sus sitios en Cnet, Wanstrath y Hyett comenzaron a construir una cantidad de mejoras a Ruby on Rails en si mismo. Pero encontraron que no era fácil lograr integrar estos cambios de vuelta en el proyecto de código abierto. Siguiendo el modelo de desarrollo de código abierto dominante entonces, Rails era administrado por un cuadro de desarrolladores de confianza a quienes se le había dado el permiso para "enviar" cambios al código fuente del proyecto. Para lograr que sus cambios fueran agregados al código central, Wanstrath y Hyett tendrían que hacer lobby a uno de estos programadores de confianza y convencerle de que sus cambios varlían la pena para ser incorporados. Eso a menudo esra más trabajo que escribir el código en primer lugar.

Ellos no eran los únicos desarrolladores con problema con el modelo del Cuidador de Confianza del código abierto. Una década atrás, Linus Torvalds se encontraba lidiando con su rol de cuidador del sistema operativo Linux que él habia inventado. En el principio, Torvalds alojó Linux en un sitio web que pertenecía a la Universidad de Helsinki. Si la gente encontraba un error en el código, le enviaban un archivo con los cambios vía email. Si Torvalds leía el email y le gustaban los cambios, el incorporaría los cambios en Linux. Pero Torvalds es conocido por no leer todos sus emails, así que en la medida que el proyecto se hacía popular, más y más propuestas se escurrían por las grietas.

Este era el pequeño secreto sucio del software de código abierto. Con el proyecto de software libre promedio, grandes cantidades de código, quizás demasiado códigoo, nunca llegaban a ser usadas. Era a menudo demasiado dificil para el usuario casual mostrarle a los desarrolladores los cambios que había hecho y después integrar fácilmente estos cambios de vuelta a la base de código.

La Segunda Venida de Linus

Así que en el 2005, Torvalds crea Git, un software de control de versiones especificamente diseñado para librarse del pesado trabajo de administrar proyectos de software. Usando Git, cualquiera puede manipular su propia versión de Linux, o en realidad de cualquier proyecto de software, y luego, presionando un botón, compartir esos cambios con Torvalds o cualquier otro. No hay guardían. En términos prácticos, Torvalds creó una herramienta que facilita a cualquiera la creación de alternativas a su proyecto Linux. En términos técnicos, esto se llama un "fork".

En los  1990s, el "forking" se consideraba algo malo. Era lo que había creado todas esas versiones incompatibles de Unix. Por un tiempo, había un gran temor de que alguien pudiera crear su propia versión de Linux, una versión que no pudiera correr los mismos programas o trabajara de la misma forma. Pero en el mundo de Git, el "forking" es bueno. El truco es asegurarse que los cambios que la gente realiza puedan ser compartidos de vuelta con la comunidad. Es mejor dejar que la gente versione un proyecto y lo manipule con sus propios cambios, que cerrarlo todo permitiéndole a unas pocas autoridades confiables que toquen el código.

En un día soleado poco habitual en Portland, Torvalds demostró Git a Wired en la oficina de su casa. Con unos pocos golpes de teclado, el pudo revisar dos nuevos aportes al kernel que cambiaban el mismo código de forma diferentes, un potencial problema en el fuente.

El viejo régimen "hace muy dificil empezar una rama radical porque generalemente tienes que convencer a la gente comprometida con el status quo desde el principio sobre la necesidad de soportar este cambio radical", dice Torvalds. "En contraste, Git facilita esto para que simplemente 'lo hagas' sin pedir permiso, y entonces puedas volver y mostrar como resultó todo, diciéndole a la gente 'miren lo que hice, y tengo los números para mostrar que mi aproximación es mucho mejor.'"

Puede haber sido hecho para Linux, pero Git rápidamente resultó ser una bendición para cualquier organización grande manejando bases de código gigantéscas. Hoy en día  Facebook, Staples, Verizon e incluso Microsoft son usuarios. En Google, Git es tan importante que la compañía le paga a  Junio Hamano, quien se hizo cargo del proyecto después de Torvalds, para que trabaje en  Git a tiempo completo, y también paga el salario para el segundo a cargo, Shawn Pearce. 

Git sin el 'dolor en el trasero'

El problema es que no todos son Linus Torvalds, y no todas las compañías son  Google. Para el 99 por ciento, la interfaz de linea de comandos de Git es notoriamente dificil de usar. Ahi es donde vienen GitHub. Simplifica Git. Un montón. Su primer eslogan era:  “Git hosting: No longer a pain in the ass.” (Alojamiento Git sin las molestias)

Tom Preston-Werner soñó sobre  GitHub e involucró a Chris Wanstrath en el proyecto una noche de octubre de 2007, en un encuentro de programadores en Zeke, un bar deportivo en San Francisco, a unas cuadras del estadio donde juegan los Gigantes de San Francisco.

Al prinicipio, GitHub era un proyecto lateral. Wanstrath y Preston-Werner se encontrarían los sábados para planificar, mientras que escribirían código durante su tiempo libre y sus trabajos diarios. “No se suponía que GitHub era una startup o una compañía startup. GitHub era sólo una herramienta que necesitábamos,” dice Wanstrath. Pero, inspirados por  Gmail, hicieron una beta privada del proyecto y lo abrieron a otros. Pronto se pudo de moda en el mundo exterior.

Para enero de 2008, Hyett estaba a bordo. Y tres meses después de esa noche en el bar deportivo, Wanstrath recibió un mensaje de Geoffrey Grosenbach, el fundador de PeepCode, un sitio educativo en linea, que había empezado a usar GitHub. “Estoy alojando el código de mi compañía aquí", les dijo Grosenbach. “No me siento comfortable sin pagarles chicos. ¿Puedo enviarles un cheque?”

Fue el primero de muchos. En julio de 2008,  Microsoft adquirió Powerset, la startup que le proveía a  Preston-Werner de un trabajo de día. El gigante del softwre le ofrecieron a Preston-Werner a $300,000 dolares y opciones de acciones para que se quedara a bordo por otros tres años. Pero el se retiró, apostando todo a GitHub.

“Daba un poco de miedo en ese tiempo rechazar algo así, pero no cambiaría nada de esa decisión en absoluto", dice ahora.

Cuando Wired visitó las oficinas de GitHub’s a principios de este años, encontramos una suerte de paraios geek. Hay un quacóptero controlado por un iPhone  y un "four-tap kegerator", una sala de conferencias que como una escenografía de bajo presupuesto de la sala de situaciones de la Casa Blanca, completa con unos enormes teléfonos rojos al estilo de los 1970s. Pero los juguetes no son lo que hacen a GitHub diferente. Es la abierta hostilidad de la startup a comando y control corporativo lo que la diferencia.

“No llevamos un registro de los días de vacaciones, no tenemos registro de las horas. No nos importa", dice el CIO Scott Chacon. “He estado acá a la medianoche y hay cinco personas aquí. Y he estado al mediodía de un jueves y no hay nadie."

Y aún así es el equipo de desarrollo de software más productivo con el que he trabajado, dice Chacon.

Git hacia el futuro 

La apuesta de Preston-Werner’s se ha pagado. GitHub es ahora rentable. Los usuarios pueden firmar gratuitamente y comenzar a contribuir, pero deben pagar dinero si quieren que su código sea alojado de forma privada, comenzado a los $7 dolares al mes.  GitHub también vende una versón empresarial del producto que permite a las compañías correr su propia versión de  GitHub detrás del cortafuegos corporativo. Esto empieza a los $5,000 dolares por año, pero puede costar cientos de miles de dólares anualmente para compañías con cientos de programadores.

Ironicalmente, sin embargo, los fans más duros de GitHub no incluyen a  Torvalds, quien brevemente movió el kernel de desarrollo a GitHub el pasado septiembre después de una falla de seguridad en su antiguo hogar.

“Me gusta mucho GitHub,” dice. “Hay una razón por la que llegó a ser uno de los repositorios de código fuentes más grandes en forma tan rápida". Pero luego desenrolla una larga lista de todos los problemas "serios" que ha tenido con él cuando ha alojado su código en el sitio, muchos de los cuales han sido reparados desde entonces. No podía filtrar comentarios, la interfaz de correo perdía anexos, la interfaz web desordenaba las constribuciones al código, y así. El balance: GitHub facilita escribir código. Pero también facilita generar basura.

That may be true, but it hasn’t held the site back. GitHub users are seemingly everywhere. On recent afternoon in San Francisco’s North Beach neighborhood, Wired was discussing the site with GitHub director of engineering Ryan Tomayko. Suddenly the guy at the next table leaned over and interrupted, like a teenager overhearing two strangers talk about his favorite band. “I just have to tell you,” he said, “GitHub is amazing.”

It’s even feeding the Occupy movement. When Jonathan Baldwin wanted to write a cell-phone version of the People’s Microphone, used by Occupy pass messages around big crowds, he posted his code straight to GitHub. The site let him share his code easily, and quickly connect with other developers to hammer out technical issues. “GitHub is the best thing ever. If you don’t host on GitHub, it doesn’t exist,” says Baldwin, a student at Parsons the New School for Design in New York.

And software is only part of the story. Geeks are learning that GitHub can help manage other projects as well. Books and even transcripts of talks have popped up on the site. One GitHub user, Manu Sporny, published his DNA information to the site last year, in the hope of spurring development of open-source DNA analysis software by providing real test data to analyze.

When Scott Chabon wrote a book about GitHub, the first fork appeared within a month. It was a German translation of his book. Now, three years later, it’s been translated into 10 languages, with another 10 translations in the works. Half of the traffic to the book’s website comes from China. “Tons of people in China are learning Git because they can read [the book] in Chinese on my website, because somebody provided that,” he says.

Ryan Blair, a technologist with the New York State Senate, thinks it could even give citizens a way to fork the law — proposing their own amendments to elected officials. A tool like GitHub could also make it easier for constituents to track and even voice their opinions on changes to complex legal code. “When you really think about it, a bill is a branch of the law,” he says. “I’m just in love with the idea of a constituent being able to send their state senator a pull request.”

GitHub today is the darling of the open-source world, but this year, the company has set its sights on Microsoft. The company recently hired a pair of developers from the software giant, and it’s working on new software to rope in the still-considerable army of coders who write programs using Microsoft’s software development tools.

“I want to live in a world where it’s easier to work together than to work alone… where every part of the software development process is a joy,” says CEO Wanstrath. “And I think GitHub can make help make that happen.


SIDEBAR:

Why Git?It’s the British slang term for stupid, despicable person — arse. The joke “I name all my projects for myself, first Linux, then git” was just too good to pass up. But it is also short, easy-to-say, and type on a standard keyboard. And reasonably unique and not any standard command, which is unusual.–Linus Torvalds